initSidebarItems({"enum":[["MatchResult","Enum to define a match result"]],"fn":[["cleanup_mock_server","External interface to cleanup a mock server. This function will try terminate the mock server with the given port number and cleanup any memory allocated for it. Returns true, unless a mock server with the given port number does not exist, or the function panics."],["create_mock_server","External interface to create a mock server. A pointer to the pact JSON as a C string is passed in, and the port of the mock server is returned."],["iterate_mock_servers","Iterates through all the mock servers, passing each one to the given closure."],["lookup_mock_server","Looks up the mock server by ID, and passes it into the given closure. The result of the closure is returned wrapped in an `Option`. If no mock server is found with that ID, `None` is returned."],["lookup_mock_server_by_port","Looks up the mock server by port number, and passes it into the given closure. The result of the closure is returned wrapped in an `Option`. If no mock server is found with that port number, `None` is returned."],["mock_server_matched","External interface to check if a mock server has matched all its requests. The port number is passed in, and if all requests have been matched, true is returned. False is returned if there is no mock server on the given port, or if any request has not been successfully matched, or the method panics."],["mock_server_mismatches","External interface to get all the mismatches from a mock server. The port number of the mock server is passed in, and a pointer to a C string with the mismatches in JSON format is returned."],["start_mock_server","Starts a mock server with the given ID and pact. The ID needs to be unique. Returns the port that the mock server is running on wrapped in a `Result`."]],"struct":[["MockServer","Struct to represent a mock server"]]});