initSidebarItems({"enum":[["MatchResult","Enum to define a match result"]],"fn":[["cleanup_mock_server","External interface to cleanup a mock server. This function will try terminate the mock server with the given port number and cleanup any memory allocated for it. Returns true, unless a mock server with the given port number does not exist, or the function panics."],["create_mock_server","External interface to create a mock server. A pointer to the pact JSON as a C string is passed in, as well as the port for the mock server to run on. A value of 0 for the port will result in a port being allocated by the operating system. The port of the mock server is returned."],["iterate_mock_servers","Iterates through all the mock servers, passing each one to the given closure."],["lookup_mock_server","Looks up the mock server by ID, and passes it into the given closure. The result of the closure is returned wrapped in an `Option`. If no mock server is found with that ID, `None` is returned."],["lookup_mock_server_by_port","Looks up the mock server by port number, and passes it into the given closure. The result of the closure is returned wrapped in an `Option`. If no mock server is found with that port number, `None` is returned."],["mock_server_matched","External interface to check if a mock server has matched all its requests. The port number is passed in, and if all requests have been matched, true is returned. False is returned if there is no mock server on the given port, or if any request has not been successfully matched, or the method panics."],["mock_server_mismatches","External interface to get all the mismatches from a mock server. The port number of the mock server is passed in, and a pointer to a C string with the mismatches in JSON format is returned."],["shutdown_mock_server","Shuts and cleans up the mock server with the given id. Returns true if a mock server was found, false otherwise."],["shutdown_mock_server_by_port","Shuts and cleans up the mock server with the given port. Returns true if a mock server was found, false otherwise."],["start_mock_server","Starts a mock server with the given ID, pact and port number. The ID needs to be unique. A port number of 0 will result in an auto-allocated port by the operating system. Returns the port that the mock server is running on wrapped in a `Result`."],["write_pact_file","External interface to trigger a mock server to write out its pact file. This function should be called if all the consumer tests have passed. The directory to write the file to is passed as the second parameter. If a NULL pointer is passed, the current working directory is used."]],"struct":[["MockServer","Struct to represent a mock server"]]});